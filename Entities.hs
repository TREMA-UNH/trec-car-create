module Entities (resolveEntities) where

import qualified Data.HashMap.Strict as M

resolveEntities :: String -> String
resolveEntities ('&' : rest)
  | Just c <- M.lookup ent entities
  = c : resolveEntities (tail $ dropWhile (/= ';') rest)
  where ent = takeWhile (/= ';') $ take longestEntity rest
resolveEntities (c : rest) = c : resolveEntities rest
resolveEntities [] = []

longestEntity :: Int
longestEntity = maximum (map (length . fst) allEntities) + 1

entities :: M.HashMap String Char
entities = M.fromList allEntities

allEntities :: [(String, Char)]
allEntities =
    [ "amp"     .= '&'
    , "Agrave"  .= 'À'
    , "Aacute"  .= 'Á'
    , "Acirc"   .= 'Â'
    , "Atilde"  .= 'Ã'
    , "Auml"    .= 'Ä'
    , "Aring"   .= 'Å'
    , "AElig"   .= 'Æ'
    , "Ccedil"  .= 'Ç'
    , "Egrave"  .= 'È'
    , "Eacute"  .= 'É'
    , "Ecirc"   .= 'Ê'
    , "Euml"    .= 'Ë'
    , "Igrave"  .= 'Ì'
    , "Iacute"  .= 'Í'
    , "Icirc"   .= 'Î'
    , "Iuml"    .= 'Ï'
    , "Ntilde"  .= 'Ñ'
    , "Ograve"  .= 'Ò'
    , "Oacute"  .= 'Ó'
    , "Ocirc"   .= 'Ô'
    , "Otilde"  .= 'Õ'
    , "Ouml"    .= 'Ö'
    , "Oslash"  .= 'Ø'
    , "OElig"   .= 'Œ'
    , "Ugrave"  .= 'Ù'
    , "Uacute"  .= 'Ú'
    , "Ucirc"   .= 'Û'
    , "Uuml"    .= 'Ü'
    , "Yuml"    .= 'Ÿ'
    , "szlig"   .= 'ß'
    , "agrave"  .= 'à'
    , "aacute"  .= 'á'
    , "acirc"   .= 'â'
    , "atilde"  .= 'ã'
    , "auml"    .= 'ä'
    , "aring"   .= 'å'
    , "aelig"   .= 'æ'
    , "ccedil"  .= 'ç'
    , "egrave"  .= 'è'
    , "eacute"  .= 'é'
    , "ecirc"   .= 'ê'
    , "euml"    .= 'ë'
    , "igrave"  .= 'ì'
    , "iacute"  .= 'í'
    , "icirc"   .= 'î'
    , "iuml"    .= 'ï'
    , "ntilde"  .= 'ñ'
    , "ograve"  .= 'ò'
    , "oacute"  .= 'ó'
    , "ocirc"   .= 'ô'
    , "otilde"  .= 'õ'
    , "ouml"    .= 'ö'
    , "oslash"  .= 'ø'
    , "oelig"   .= 'œ'
    , "ugrave"  .= 'ù'
    , "uacute"  .= 'ú'
    , "ucirc"   .= 'û'
    , "uuml"    .= 'ü'
    , "yuml"    .= 'ÿ'
    , "iquest"  .= '¿'
    , "iexcl"   .= '¡'
    , "sect"    .= '§'
    , "para"    .= '¶'
    , "dagger"  .= '†'
    , "Dagger"  .= '‡'
    , "bull"    .= '•'
    , "ndash"   .= '–'
    , "mdash"   .= '—'
    , "lsaquo"  .= '‹'
    , "rsaquo"  .= '›'
    , "laquo"   .= '«'
    , "raquo"   .= '»'
    , "lsquo"   .= '‘'
    , "rsquo"   .= '’'
    , "ldquo"   .= '“'
    , "rdquo"   .= '”'
    , "apos"    .= '\''
    , "quot"    .= '"'
    , "trade"   .= '™'
    , "copy"    .= '©'
    , "reg"     .= '®'
    , "cent"    .= '¢'
    , "euro"    .= '€'
    , "yen"     .= '¥'
    , "pound"   .= '£'
    , "curren"  .= '¤'
    , "alpha"   .= 'α'
    , "beta"    .= 'β'
    , "gamma"   .= 'γ'
    , "delta"   .= 'δ'
    , "epsilon" .= 'ε'
    , "zeta"    .= 'ζ'
    , "Alpha"   .= 'Α'
    , "Beta"    .= 'Β'
    , "Gamma"   .= 'Γ'
    , "Delta"   .= 'Δ'
    , "Epsilon" .= 'Ε'
    , "Zeta"    .= 'Ζ'
    , "eta"     .= 'η'
    , "theta"   .= 'θ'
    , "iota"    .= 'ι'
    , "kappa"   .= 'κ'
    , "lambda"  .= 'λ'
    , "mu"      .= 'μ'
    , "nu"      .= 'ν'
    , "Eta"     .= 'Η'
    , "Theta"   .= 'Θ'
    , "Iota"    .= 'Ι'
    , "Kappa"   .= 'Κ'
    , "Lambda"  .= 'Λ'
    , "Mu"      .= 'Μ'
    , "Nu"      .= 'Ν'
    , "xi"      .= 'ξ'
    , "omicron" .= 'ο'
    , "pi"      .= 'π'
    , "rho"     .= 'ρ'
    , "sigma"   .= 'σ'
    , "sigmaf"  .= 'ς'
    , "Xi"      .= 'Ξ'
    , "Omicron" .= 'Ο'
    , "Pi"      .= 'Π'
    , "Rho"     .= 'Ρ'
    , "Sigma"   .= 'Σ'
    , "tau"     .= 'τ'
    , "upsilon" .= 'υ'
    , "phi"     .= 'φ'
    , "chi"     .= 'χ'
    , "psi"     .= 'ψ'
    , "omega"   .= 'ω'
    , "Tau"     .= 'Τ'
    , "Upsilon" .= 'Υ'
    , "Phi"     .= 'Φ'
    , "Chi"     .= 'Χ'
    , "Psi"     .= 'Ψ'
    , "Omega"   .= 'Ω'
    , "int"     .= '∫'
    , "sum"     .= '∑'
    , "prod"    .= '∏'
    , "radic"   .= '√'
    , "minus"   .= '−'
    , "plusmn"  .= '±'
    , "infin"   .= '∞'
    , "asymp"   .= '≈'
    , "prop"    .= '∝'
    , "equiv"   .= '≡'
    , "ne"      .= '≠'
    , "le"      .= '≤'
    , "ge"      .= '≥'
    , "times"   .= '×'
    , "middot"  .= '·'
    , "divide"  .= '÷'
    , "part"    .= '∂'
    , "prime"   .= '′'
    , "Prime"   .= '″'
    , "nabla"   .= '∇'
    , "permil"  .= '‰'
    , "deg"     .= '°'
    , "there4"  .= '∴'
    , "alefsym" .= 'ℵ'
    , "oslash"  .= 'ø'
    , "isin"    .= '∈'
    , "notin"   .= '∉'
    , "cap"     .= '∩'
    , "cup"     .= '∪'
    , "sub"     .= '⊂'
    , "sup"     .= '⊃'
    , "sube"    .= '⊆'
    , "supe"    .= '⊇'
    , "not"     .= '¬'
    , "and"     .= '∧'
    , "or"      .= '∨'
    , "exist"   .= '∃'
    , "forall"  .= '∀'
    , "rArr"    .= '⇒'
    , "lArr"    .= '⇐'
    , "dArr"    .= '⇓'
    , "uArr"    .= '⇑'
    , "hArr"    .= '⇔'
    , "rarr"    .= '→'
    , "darr"    .= '↓'
    , "uarr"    .= '↑'
    , "larr"    .= '←'
    , "harr"    .= '↔'
    ]
  where x .= y = (x,y)
